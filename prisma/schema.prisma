// prisma/schema.prisma - Thay thế toàn bộ file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String              @unique
  emailVerified     DateTime?
  password          String
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accounts          Account[]
  sessions          Session[]
  flashcardSets     FlashcardSet[]
  flashcardProgress FlashcardProgress[]
  memberships       Membership[]

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FlashcardSet {
  id          String              @id @default(cuid())
  title       String
  description String?
  cardCount   Int                 @default(0)
  progress    Int                 @default(0)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  userId      String
  
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcards  Flashcard[]
  progresses  FlashcardProgress[]

  @@index([userId])
  @@index([userId, updatedAt])
  @@index([userId, createdAt])
  @@index([createdAt])
  @@map("flashcard_sets")
}

model Flashcard {
  id        String       @id @default(cuid())
  question  String
  answer    String
  example   String?
  createdAt DateTime     @default(now())
  setId     String
  
  set       FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@index([setId])
  @@index([createdAt])
  @@map("flashcards")
}

model FlashcardProgress {
  id           String   @id @default(cuid())
  userId       String
  setId        String
  learned      Int      @default(0)
  lastReviewed DateTime @default(now())

  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  set  FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)

  @@unique([userId, setId])
  @@index([userId])
  @@index([userId, lastReviewed])
  @@index([setId])
  @@map("flashcard_progress")
}

model Course {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]

  @@index([createdAt])
  @@map("courses")
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  role      String   @default("member")
  joinedAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([joinedAt])
  @@map("memberships")
}